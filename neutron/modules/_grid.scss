// Grid
//---------------------------------------------

//Declares the container element of child rows or columns
@mixin columns(
	$columns:"", 
	$container-width:$container-max-width, 
	$container-align:"",
	$padding:$global-column-padding,
	$flush-padding:false,
	$margin:"",
	$flush-margin:true,
	$target:"*"
) {
	max-width: $container-width;
	margin-left: auto;
	margin-right: auto;
	@include clear-fix();

	@if $columns != "" {
		
		$columns: calc-column-ratio($columns);
		$column-count: length($columns);
		$target-child-selector: child-selector($target);
		$widths: column-width-strings($columns, $margin, $flush-margin);
		
		$i: 0;
		@each $width in $widths {
			$i: $i + 1;
			
			& > #{$target}:#{$target-child-selector}(#{$column-count}n+#{$i}) {
				width: calc(#{$width});
				float:left;
				padding: $padding;				

				@if $margin != "" {
					margin: $margin;
				}
				
				//if first column
				@if $i == 1 {
					clear: left;
					
					@if $flush-padding {
						padding-left: 0;
					}
					@if $flush-margin {
						margin-left: 0;
					}
				}
				
				//if last column
				@if $i == $column-count {
					@if $flush-padding {
						padding-right: 0;
					}
					@if $flush-margin {
						margin-right: 0;
					}
				}
				
				@content;
			}
		}
	}

	//Set alignment of container
	@if $container-align != "" {
		@include container-align($container-align);
	}

}

//Alias for columns
@mixin column($arguments...) {
	@include columns($arguments...);
}
@mixin col($arguments...) {
	@include columns($arguments...);
}

@function reorder-list($list, $order) {
	
	$new-list:();

	@each $index in $order {
		$item: nth($list, $index);
		$new-list: append($new-list, $item, comma);
	}
	
	@return $new-list;
}

@function calculate-column-widths($column-ratio) {
	
	$ratio-sum: sum-ratios($column-ratio);
	$column-widths: ();

	//Determine width of each column
	@each $column in $column-ratio {
		
		$width: $column;
		
		@if unitless($column) {
			$width: (100% / $ratio-sum) * $column;
		}
		
		$column-widths: append($column-widths, $width, comma);
	}
	
	$column-widths: compensate-for-non-ratios($column-widths, $column-ratio);
	
	@return $column-widths;
}

@function column-width-strings($columns, $margin: "", $flush-margin: true) {
	
	$column-widths: calculate-column-widths($columns);
	$column-count: length($columns);
	$ratio-count: count-ratios($columns);
	$non-ratios: $column-count - $ratio-count;
	$ratio-sum: sum-ratios($columns);
	$column-width-list: ();
		
	$margin-left: 0;
	$margin-right: 0;
		
	@if $margin != "" {
		//get margins for left and right of the columns
		$margin-left: extract-position($margin,left);
		$margin-right: extract-position($margin,right);
	}

	//assign calculated widths to elements
	$index: 0;
	@each $width in $column-widths {	
		$index: $index + 1;
		
		$column-ratio: nth($columns, $index);
		$is-not-explicit-width: str-index(#{$width}, "%");
		$calc-contents: "#{$width}";
		
		@if $is-not-explicit-width {

			// Adjust column widths to compensate for set margins
			@if $margin != "" {
				@if $margin-left != 0 {
					$non-ratio-left-margin: (($margin-left * $non-ratios) / $ratio-sum) * $column-ratio;
					$calc-contents: $calc-contents + " - #{$margin-left + $non-ratio-left-margin}"
					;
				}						
				@if $margin-right != 0 {
					$non-ratio-right-margin: (($margin-right * $non-ratios) / $ratio-sum) * $column-ratio;
					$calc-contents: $calc-contents + " - #{$margin-right + $non-ratio-right-margin}";
				}
				@if $flush-margin {
					$flush-left: ($margin-left / $ratio-sum) * $column-ratio;
					$flush-right: ($margin-right / $ratio-sum) * $column-ratio;
					
					$calc-contents: $calc-contents + " + #{$flush-left}";
					$calc-contents: $calc-contents + " + #{$flush-right}";
				}	
			}
		}
		
		$column-width-list: append($column-width-list, $calc-contents, comma)
	}
	
	@return $column-width-list;

}

@mixin container-align($align:"") {
	//Set alignment 
	@if $align != "" {
		float:none;
		
		@if $align == left {
			margin-left: 0;
		}
		
		@if $align == right {
			margin-right: 0;
		}
		
		@if $align == center {
			margin-right: auto;
			margin-left: auto;
		}
	}
}

@function compensate-for-non-ratios($column-widths, $columns) {
	$non-ratios: ();
	$adjusted-columns: ();
	$ratio-sum: sum-ratios($columns);
	
	@each $column in $column-widths {	
		@if unit($column) != "%" {
			$non-ratios: append($non-ratios, $column, comma);
		} 
	}

	$i: 0;
	@each $column in $column-widths {
		$i: $i + 1;
		
		$new-column: $column;

		@if unit($column) == "%" {
			$column-ratio: nth($columns, $i);
			
			@each $non-ratio in $non-ratios {
				$new-column: $new-column + " - " + (($non-ratio / $ratio-sum) * $column-ratio);
			}
		}
		
		$adjusted-columns: append($adjusted-columns, $new-column, comma);
		
	}
	
	@return $adjusted-columns;
	
}

@function is-pure-ratio($columns) {
	$is-pure: true;
	
	@each $column in $columns {
		$unitless: unitless($column);
		
		@if $unitless != true {
			$is-pure: false;
		}
	}
	
	@return $is-pure;
}

@function count-ratios($list) {
	$count: 0;
	
	@each $item in $list {
		$unitless: unitless($item);
		
		@if $unitless {
			$count: $count + 1;
		}
	}
	
	@return $count;
}

@function sum-ratios($list) {
	$sum: 0;
	
	@each $item in $list {
		$unitless: unitless($item);
		
		@if $unitless {
			$sum: $sum + $item;
		}
	}
	
	@return $sum;
}

@function calc-column-ratio($columns) {
	$column-ratio: $columns;
	
	@if type-of($columns) != list {
		$column-ratio: ();
		
		@for $i from 1 through $columns {
			$column-ratio: append($column-ratio, 1, comma);
		}
	}
	
	@return $column-ratio;
}

@function child-selector($target-selector) {
	$child-selector: "nth-of-type";
	
	@if $target-selector == "*" {
		$child-selector: "nth-child";
	}
	
	@return $child-selector;
}

@mixin order($order, $columns:"", $margin:"", $flush-margin:true, $target:"*") {
	
	@if type-of($order) == list {
		
		//if no ratio is set, use $order to determine number of equal width columns
		@if $columns == "" {
			$columns: length($order);
		}

		//if column ratio is not a list, generate it
		$columns: calc-column-ratio($columns);
		$column-sum: sum($columns);
		$column-count: length($columns);
		$target-child-selector: child-selector($target);
				
		
		
		
		//////////////////////////////////////////////////////////////////////////////////////////
		
		$margin-left: 0;
		$margin-right: 0;
		
		@if $margin != "" {	
			$margin-left: extract-position($margin,left);
			$margin-right: extract-position($margin,right);
		}
		
		//calculate width of each column
		$column-width-string:();

		$i: 0;
		$columns-offset: ();
		@each $column in $columns {
			$i: $i + 1;
			
			// calculate column widths 
			$col-width: (100% / $column-sum) * $column;
			
			@if $margin != "" {
				@if $flush-margin {
					$flush-left: $margin-left / $column-count;
					$flush-right: $margin-right / $column-count;
					$flush: $flush-left + $flush-right;
					$col-width: $col-width + " + #{$flush}";
				}
			}

			$column-width-string: append($column-width-string, "(#{$col-width})", comma);
					
			// get sum of left offset of columns that come before current original position
			$current-index: 0;
			$orig-offset-from-left: "0px";
			
			@while $current-index < $i {
				$current-index: $current-index + 1;
				
				$add-offset: nth($column-width-string, $current-index);
				$orig-offset-from-left: $orig-offset-from-left + " + " + $add-offset;
			}
			
			$orig-offset-from-left: "(" + $orig-offset-from-left + ")";
			$columns-offset: append($columns-offset, $orig-offset-from-left, comma);
			
		}
		
		////////////////////////////////////////////////////////////////////////////////


		// $column-width-string-function: column-width-strings($columns, $margin, $flush-margin);

		// $i: 0;
		// $columns-offset: ();
		// @each $width in $column-width-string {
		// 	$i: $i + 1;
					
		// 	// get sum of left offset of columns that come before current original position
		// 	$column: 0;
		// 	$orig-offset-from-left: "0px";
			
		// 	@while $column < $i {
		// 		$column: $column + 1;
		// 		$orig-offset-from-left: $orig-offset-from-left + " + " + $width;
		// 	}
			
		// 	$orig-offset-from-left: "(" + $orig-offset-from-left + ")";
		// 	$columns-offset: append($columns-offset, $orig-offset-from-left, comma)
			
		// }
		
		//////////////////////////////////////////////////////////////////////////////////////////

		
		$new-column-width-string: reorder-list($column-width-string, $order);

		//iterate over each column
		$i: 0;
		@each $column in $order {
			$i: $i + 1;

			// get sum of widths of columns that come before current one and add to offset
			$new-position: index($order, $column);	
			$new-offset-from-left: "0px";
			
			$index: 0;
			@while $index < $new-position {
				$index: $index + 1;
				$new-offset-from-left: $new-offset-from-left + " + " + nth($new-column-width-string, $index);
			}

			//Get left offset required for this column to reset column to left side.
			$ori-offset: nth($columns-offset, $column);

			& > #{$target}:#{$target-child-selector}(#{$column-count}n+#{$column}) {
				left: calc(0px - (#{$ori-offset}) + (#{$new-offset-from-left}));
				position: relative;
			}
		}
	}
}



