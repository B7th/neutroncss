// Grid
//---------------------------------------------

//Declares the container element of child rows or columns
@mixin columns(
	$columns:"", 
	$container-width:$container-max-width, 
	$container-align:"",
	$padding:$global-column-padding,
	$flush-padding:false,
	$margin:"",
	$flush-margin:true,
	$target:"*"
) {
	max-width: $container-width;
	margin-left: auto;
	margin-right: auto;
	@include clear-fix();

	@if $columns != "" {

		$column-sum: get-column-sum($columns);	
		$column-count: get-column-count($columns);
		$column-ratio: calc-column-ratio($columns);
		$column-widths: calculate-column-widths($column-ratio, $container-width, $margin);	
		$target-child-selector: child-selector($target);
		
		$margin-left: 0;
		$margin-right: 0;
		
		@if $margin != "" {
			
			//get margins for left and right of the columns
			$margin-left: extract-position($margin,left);
			$margin-right: extract-position($margin,right);
		
		}
	
		//assign calculated widths to elements
		$index: 0;
		@each $width in $column-widths {	
			$index: $index + 1;
			
			$col-width: $width;

			& > #{$target}:#{$target-child-selector}(#{$column-count}n+#{$index}) {
			
				$calc-contents: "#{$width}";
					
				@if $margin != "" {
					
					@if $margin-left != 0 {
						$calc-contents: $calc-contents + " - #{$margin-left}";
					}					
					
					@if $margin-right != 0 {
						$calc-contents: $calc-contents + " - #{$margin-right}";
					}

					@if $flush-margin and false {
						$flush-left: $margin-left / $column-count;
						$flush-right: $margin-right / $column-count;
						$calc-contents: $calc-contents + " + #{$flush-left}";
						$calc-contents: $calc-contents + " + #{$flush-right}";
					}	

				}

				width: calc(#{$calc-contents});
				float:left;
				padding: $padding;				

				@if $margin != "" {
					margin: $margin;
				}
				
				//if first column
				@if $index == 1 {
					clear: left;
					
					@if $flush-padding {
						padding-left: 0;
					}
					@if $flush-margin {
						margin-left: 0;
					}
				}
				
				//if last column
				@if $index == $column-count {
					@if $flush-padding {
						padding-right: 0;
					}
					@if $flush-margin {
						margin-right: 0;
					}
				}
				
				@content;
			}
		}	
	}

	//Set alignment of container
	@if $container-align != "" {
		@include container-align($container-align);
	}

}

//Alias for columns
@mixin column($arguments...) {
	@include columns($arguments...);
}
@mixin col($arguments...) {
	@include columns($arguments...);
}

@function reorder-list($list, $order) {
	
	$new-list:();

	@each $index in $order {
		$item: nth($list, $index);
		$new-list: append($new-list, $item, comma);
	}
	
	@return $new-list;
}

@function calculate-column-widths($column-ratio, $args...) {
	
	$column-sum: sum($column-ratio);
	$column-count: length($column-ratio);
	$column-widths: ();

	//Determine width of each column
	@each $column in $column-ratio {
		$width: (100% / $column-sum) * $column;
		$column-widths: append($column-widths, $width, comma);
	}
	
	@return $column-widths;

}

@mixin container-align($align:"") {
	//Set alignment 
	@if $align != "" {
		float:none;
		
		@if $align == left {
			margin-left: 0;
		}
		
		@if $align == right {
			margin-right: 0;
		}
		
		@if $align == center {
			margin-right: auto;
			margin-left: auto;
		}
	}
}

@function calc-column-ratio($columns) {
	$column-ratio: $columns;
	$column-sum: get-column-sum($columns);
	
	@if type-of($columns) != list {
		$column-ratio: ();
		
		@for $i from 1 through $column-sum {
			$column-ratio: append($column-ratio, $columns, comma);
		}
	}
	
	@return $column-ratio;
}

@function get-column-sum($columns) {
	@if type-of($columns) == list {
		@return sum($columns);
	} @else {
		@return $columns;
	}
}

@function get-column-count($columns) {
	@if type-of($columns) == list {
		@return length($columns);
	} @else {
		@return $columns;
	}
}

@function child-selector($target-selector) {
	$child-selector: "nth-of-type";
	
	@if $target-selector == "*" {
		$child-selector: "nth-child";
	}
	
	@return $child-selector;
}

@mixin order($order, $columns:"", $margin:"", $flush-margin:true, $target:"*") {
	
	@if type-of($order) == list {
		
		//if no ratio is set, determine 
		//ratio from provided order list
		@if $columns == "" {
			$columns:();
			$order-count: length($order);

			@for $i from 1 through $order-count {
				$columns: append($columns, 1, comma);
			}
		}
		
		//if column ratio is not a list, generate it
		$columns: calc-column-ratio($columns);
		$column-sum: sum($columns);
		$column-count: length($columns);
		
		$margin-left: 0;
		$margin-right: 0;
		
		@if $margin != "" {	
			$margin-left: extract-position($margin,left);
			$margin-right: extract-position($margin,right);
		}
		
		//calculate current distance from left side of container
		$column-width-string:();

		$col-index: 1;
		@each $column in $columns {
			
			$col-width: (100% / $column-sum) * $column;
			$col-width-string: "#{$col-width}";
			
			@if $flush-margin and $margin != "" {
				@if $col-index == 1 {
					$col-width-string: $col-width-string + " - #{$margin-left}";
				}
			}
			
			$col-width-string: "(#{$col-width-string})";
			
			$column-width-string: append($column-width-string, $col-width-string, comma);
			$col-index: $col-index + 1;
		}
		
		$new-column-width-string: reorder-list($column-width-string, $order);

		// Calculate values to reset all columns to left side
		$i: 0;
		$columns-offset: ();
		@each $column in $columns {
			$i: $i + 1;
			
			// get sum of widths of columns that come before current original position
			$current-index: 1;
			$current-offset: "0px";
			@while $current-index < $i {
				$add-offset: nth($column-width-string, $current-index);
				$current-offset: $current-offset + " + " + $add-offset;
				$current-index: $current-index + 1;
			}
			
			$current-offset: "(" + $current-offset + ")";
			$columns-offset: append($columns-offset, $current-offset, comma)
			
		}

		//iterate over each column
		$i: 0;
		@each $column in $order {
			
			$i: $i + 1;

			// get sum of widths of columns that come before current one and add to offset
			$new-position: index($order, $column);	
			$new-offset: "0px";
			
			$index: 1;
			@while $index < $new-position {

				$add-offset: nth($new-column-width-string, $index);
				$new-offset: $new-offset + " + " + $add-offset;
				$index: $index + 1;

			}
			
			//Get left offset required for this column to reset column to left side.
			$ori-offset: nth($columns-offset, $column);

			& > *:nth-child(#{$column}) {
				left: calc(0px - #{$ori-offset} + #{$new-offset});
				position: relative;
			}
		}
	}

}



