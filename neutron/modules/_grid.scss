/* Grid
---------------------------------------------*/

//Declares the container element of child rows or columns
@mixin container($columns:"", $max-width:960px, $align:"") {
	max-width: $max-width;
	margin-left: auto;
	margin-right: auto;
	@include clear-fix();
	
	//If argument is not a list, 
	//and is not empty, set equal 
	//width to all immediate child elements
	@if type-of($columns) != list and $columns != "" {
		& > * {
			width: (100% / $columns);
			float:left;
		}
	}
	
	//If argument is a list, set 
	//width of each immediate child 
	//as instructed by passed list
	@if type-of($columns) == list {
		$total: sum($columns);
		$index: 0;

		@each $column in $columns {	

			$index: $index + 1;

			& > *:nth-child(#{$index}) {
				width: (100% / $total) * $column;
				float:left;
			}
		}
	}
	
	//Set alignment of container
	@if $align != "" {
		@include container-alignment($align);
	}
}

@mixin container-alignment($align:"") {
	//Set alignment 
	@if $align != "" {
		
		@if $align == left {
			margin-left: 0;
		}
		
		@if $align == right {
			margin-right: 0;
		}
		
		@if $align == center {
			margin-right: auto;
			margin-left: auto;
		}

	}
}

@mixin column-padding($padding:"", $flush-padding:false) {
	//if padding argument passed, set padding
	@if $padding != "" {
		& > * {
			padding: $padding;	
		}
	}

	//if padding is set to be flush remove 
	//padding on left and right padding on 
	//the first and last columns respectively.
	@if $flush-padding == true {
		& > * {
			&:first-child {
				padding-left: 0;
			}
			&:last-child {
				padding-right: 0;
			}
		}
	}
}

@function calculate-widths($columns) {
	$column-total: sum($columns);
	$calculated-widths:();

	$index: 0;
	@each $column in $columns {	
		$index: $index + 1;
		$width: (100% / $column-total) * $column;
		$calculated-widths: append($calculated-widths, $width, comma);
	}

	@return $calculated-widths;
}

@mixin push($column, $push-by, $columns) {
	
	$calculated-widths-push:calculate-widths($columns);
	$new-position: $column + $push-by;
	$left: 0;
	
	@for $i from 1 through $new-position {
		$left: $left + nth($calculated-widths-push, $i);
	}
	
	$left: $left -  nth($calculated-widths-push, $new-position);
	
	
	

	/*
	$calculated-widths-push: #{$calculated-widths-push}
	$new-position: #{$new-position}
	$column: #{$column}
	$push-by: #{$push-by}
	*/

	& > *:nth-child(#{$column}) {
		left: $left;
		position: relative;
	}
	
}

@mixin pull($column, $pull-by, $columns) {
	
	$calculated-widths-pull:calculate-widths($columns);
	$new-position: $column - $pull-by;
	$right: 0;
	
	@for $i from 1 through $new-position {
		$right: $right + nth($calculated-widths-pull, $i);
	}
	
	//$right: $right + nth($calculated-widths-pull, $new-position);
	
	/*
	$calculated-widths-pull: #{$calculated-widths-pull}
	$new-position: #{$new-position}
	$column: #{$column}
	$pull-by: #{$pull-by}
	$right: #{$right}
	*/

	
	$right: $right - nth($calculated-widths-pull, $new-position);
	

	& > *:nth-child(#{$column}) {
		right: $right;
		position: relative;
	}
	
}

//@mixin reorder($column, $pull-by, $columns) {
//	//
//}

@mixin order($order:"", $columns:"") {
	
	@if type-of($order) == list and type-of($columns) == list {
		
		$index: 0;
		@each $column in $order {
			$index: $index + 1;
			
			//push
			@if $column < $index {
				$push-by: $index - $column;
				@include push($column,$push-by,$columns);
			}
			
			//pull
			@if $column > $index {
				$pull-by: $column - $index;
				@include pull($column,$pull-by,$columns);
			}
			
			@if $column == $index {
				//if previous columns are smaller, pull
				//if pervious columns are bigger, push
				$calculated-widths-original:calculate-widths($columns);
				$total-columns: sum($columns);
				$orig-w-before:0;
				$orig-w-after:100;
				$new-w-before:0;
				$new-w-after:100;
				
				$new-columns:();
				
				@each $index in $order {
					$item: nth($columns, $index);
					$new-columns:append($new-columns, $item);
				}
	
				$calculated-widths-new:calculate-widths($new-columns);
				
				//$total-columns
				
				//$new-columns:zip($order, $columns);
				
				//sum original width before column
				@for $i from 1 through $column {
					$orig-w-before: $orig-w-before + nth($calculated-widths-original, $i);
				} 
				$orig-w-before: $orig-w-before - nth($calculated-widths-original, $column);

				//sum original width after column
				@for $i from 1 through $column {
					$orig-w-after: $orig-w-after - nth($calculated-widths-original, $i);
				}
				$orig-w-after: $orig-w-after;// - nth($calculated-widths-original, $column);
				
				
				
				//sum new width before column
				@for $i from 1 through $column {
					$new-w-before: $new-w-before + nth($calculated-widths-new, $i);
				}
				$new-w-before: $new-w-before - nth($calculated-widths-new, $column);
				
				//sum new width after column
				@for $i from 1 through $column {
					$new-w-after: $new-w-after - nth($calculated-widths-new, $i);
				}
				$new-w-after: $new-w-after;// + nth($calculated-widths-new, $column);
				
//				/*
//				$new-columns: #{$new-columns}
//				$calculated-widths-original: #{$calculated-widths-original}
//				$calculated-widths-new: #{$calculated-widths-new}
//				$column: #{$column}
//				$total-columns: #{$total-columns}
//				$orig-w-before: #{$orig-w-before};
//				$orig-w-after: #{$orig-w-after};
//				
//				$new-w-before: #{$new-w-before};
//				$new-w-after: #{$new-w-after};
//				
//				
//				*/


				@if $new-w-before > $orig-w-before {
					$left: $new-w-before - $orig-w-before; 
					
					& > *:nth-child(#{$column}) {
						left: $left;
						position: relative;
					}
				}
				
				@if $new-w-after > $orig-w-after {
					$right: $new-w-after - $orig-w-after; 
					
					& > *:nth-child(#{$column}) {
						right: $right;
						position: relative;
					}
				}
				
			}
		}
	}
}

//Declares the column elements
@mixin columns($columns:"", $padding:"", $flush-padding:false) { 
	float:left;

	//If column argument passed, set width
	@if $columns != "" {
		
		@if type-of($columns) != list {
					
			width: (100% / $columns);
			
		} @else {
			
			$total: sum($columns);
			$index: 0;
	
			@each $column in $columns {
				$index: $index + 1;
				
				&:nth-child(#{$index}) {
					width: (100% / $total) * $column;
				}
			}
		}
	}
	
	//if padding argument passed set padding
	@if $padding != "" {
		padding: $padding;		
	}

	//if padding is set to be flush remove 
	//padding on left and right padding on 
	//the first and last columns respectively.
	@if $flush-padding == true {
		&:first-child {
			padding-left: 0;
		}
		&:last-child {
			padding-right: 0;
		}
	}
}

//Non-plural alias for columns mixin
@mixin column($columns:"", $padding:"", $flush-padding:false) {
	@include columns($columns, $padding, $flush-padding);
}
