// Grid
//---------------------------------------------

//Declares the container element of child rows or columns
@mixin columns(
	$columns:"", 
	$container-width:$container-max-width, 
	$container-align:"",
	$padding:$global-column-padding,
	$flush-padding:false,
	$margin:"",
	$flush-margin:true,
	$target:"*"
) {
	max-width: $container-width;
	margin-left: auto;
	margin-right: auto;
	@include clear-fix();

	@if $columns != "" {

		$column-sum: get-column-sum($columns);	
		$column-count: get-column-count($columns);
		$column-ratio: calc-column-ratio($columns);
		$column-subtraction: calculate-column-subtraction($column-ratio, $margin, $flush-margin);
		$column-widths: calculate-column-widths($column-ratio, $container-width, $margin);	
		$target-child-selector: child-selector($target);

		//assign calculated widths to elements
		$index: 0;
		@each $width in $column-widths {	
			$index: $index + 1;

			& > #{$target}:#{$target-child-selector}(#{$column-count}n+#{$index}) {

				@if $margin != "" and $column-subtraction != 0 {
					width: calc(#{$width} - #{$column-subtraction});
				} @else {
					width: $width;
				}
				
				float:left;
				padding: $padding;				

				@if $margin != "" {
					margin: $margin;
				}
				
				@content;
			}
		}	

		//apply styles to first column of the row
		@include target-col(1, $column-count, $target) {
			clear: left;
			
			@if $flush-padding {
				padding-left: 0;
			}
			@if $flush-margin {
				margin-left: 0;
			}
		}
	
		//apply styles to last column of the row
		@include target-col($column-count, $column-count, $target) {
				
			@if $flush-padding {
				padding-right: 0;
			}
			@if $flush-margin {
				margin-right: 0;
			}
		}
	}

	//Set alignment of container
	@if $container-align != "" {
		@include container-align($container-align);
	}

}

//Alias for columns
@mixin column($arguments...) {
	@include columns($arguments...);
}

//Alias for columns
@mixin col($arguments...) {
	@include columns($arguments...);
}

@function calculate-column-widths($column-ratio, $margin:"", $flush-margin:true) {

	$avail-width: 100%;
	$left-margin-percent: 0%;
	$right-margin-percent: 0%; 
	$calc-column-widths: ();
	$column-sum: sum($column-ratio);
	$column-count: length($column-ratio);

	//calculate margins
	@if $margin != "" {
		
		//get margins for left and right of the columns
		$margin-left: extract-position($margin,left);
		$margin-right: extract-position($margin,right);

		//subtract total available width by margin percentage
		@if unit($margin-left) == "%" {
			$left-margin-percent: $column-count * $margin-left;
			
			@if $flush-margin == true {
				$left-margin-percent: $left-margin-percent - $margin-left;
			}				
		}
		
		@if unit($margin-right) == "%" {
			$right-margin-percent: $column-count * $margin-right;
			
			@if $flush-margin == true {
				$right-margin-percent: $right-margin-percent - $margin-right;
			}					
		}
	}

	//adjusted total avilable width
	$avail-width: $avail-width - ($left-margin-percent + $right-margin-percent);

	//iterate through columns and generate list of widths
	@each $column in $column-ratio {
		$calculated-width: ($avail-width / $column-sum) * $column;
		$calc-column-widths: append($calc-column-widths, $calculated-width, comma);
	}
	
	@return $calc-column-widths;

}

@function calculate-column-subtraction($column-ratio, $margin:"", $flush-margin:true) {

	$total-fixed-width: 0;
	$left-margin-fixed: 0;
	$right-margin-fixed: 0;
	$column-width-subtraction: 0;
	$column-sum: sum($column-ratio);
	$column-count: length($column-ratio);

	//calculate margins
	@if $margin != "" {
		
		//get margins for left and right of the columns
		$margin-left: extract-position($margin,left);
		$margin-right: extract-position($margin,right);


		@if unit($margin-left) != "%" {
			//if non-percent unit used, calculate fixed size portion of remaining width
			
			$left-margin-fixed: $column-count * $margin-left;

			@if $flush-margin == true {
				$left-margin-fixed: $left-margin-fixed - $margin-left;
			}
			
		}
		
		@if unit($margin-right) != "%" {

			//if non-percent unit used, calculate fixed size portion of remaining width
			
			$right-margin-fixed: $column-count * $margin-right;

			@if $flush-margin == true {
				$right-margin-fixed: $right-margin-fixed - $margin-right;
			}
			
		}
	}

	//how much of total width is fixed
	$total-fixed-width: $total-fixed-width + $left-margin-fixed + $right-margin-fixed;
	$column-width-subtraction: $total-fixed-width / $column-count;

	@return $column-width-subtraction;

}


@mixin target-col($column-target, $column-count, $target-selector:"*") {

	$target-child-selector: child-selector($target-selector);

	& > #{$target-selector} {
		&:#{$target-child-selector}(#{$column-count}n+#{$column-target}) {
			@content;
		}
	}
}

@mixin container-align($align:"") {
	//Set alignment 
	@if $align != "" {
		float:none;
		
		@if $align == left {
			margin-left: 0;
		}
		
		@if $align == right {
			margin-right: 0;
		}
		
		@if $align == center {
			margin-right: auto;
			margin-left: auto;
		}
	}
}

@function calc-column-ratio($columns) {
	$column-ratio: $columns;
	$column-sum: get-column-sum($columns);
	
	@if type-of($columns) != list {
		$column-ratio: ();
		
		@for $i from 1 through $column-sum {
			$column-ratio: append($column-ratio, $columns, comma);
		}
	}
	
	@return $column-ratio;
}

@function get-column-sum($columns) {
	@if type-of($columns) == list {
		@return sum($columns);
	} @else {
		@return $columns;
	}
}

@function get-column-count($columns) {
	@if type-of($columns) == list {
		@return length($columns);
	} @else {
		@return $columns;
	}
}

@function child-selector($target-selector) {
	$child-selector: "nth-of-type";
	
	@if $target-selector == "*" {
		$child-selector: "nth-child";
	}
	
	@return $child-selector;
}

@function calculate-widths($columns) {
	$column-total: sum($columns);
	$calculated-widths:();

	$index: 0;
	@each $column in $columns {	
		$index: $index + 1;
		$width: (100% / $column-total) * $column;
		$calculated-widths: append($calculated-widths, $width, comma);
	}

	@return $calculated-widths;
}

@mixin order($order, $columns:"") {
	
	@if type-of($order) == list {
		//if no ratio is set, determine 
		//ratio from provided order list
		@if $columns == "" {
			$columns:();
			$order-count: length($order);

			@for $i from 1 through $order-count {
				$columns: append($columns, 1, comma);
			}
		}

		//calculate widths of 
		//current and new layouts
		$column-count: length($columns);
		$new-columns:();
		//retreive original order of columns
		@each $index in $order {
			$item: nth($columns, $index);
			$new-columns:append($new-columns, $item);
		}

		$original-widths:calculate-widths($columns);
		$new-widths:calculate-widths($new-columns);
	
		//iterate through each column
		$index: 0;
		@each $column in $order {
			$index: $index + 1;

			//calc sum of original previous widths
			$orig-w-before: 0;
			@for $i from 1 through $column {
				$orig-w-before: $orig-w-before + nth($original-widths, $i);
			} 
			$orig-w-before: $orig-w-before - nth($original-widths, $column);
	 
			//calc sum of new previous widths
			$new-w-before: 0;
			@for $i from 1 through $index {
				$new-w-before: $new-w-before + nth($new-widths, $i);
			} 
			$new-w-before: $new-w-before - nth($new-widths, $index);
			
			//calc sum of original following widths
			$orig-w-after: 100;
			@for $i from 1 through $column {
				$orig-w-after: $orig-w-after - nth($original-widths, $i);
			} 
	
			//calc sum of new following widths
			$new-w-after: 100;
			@for $i from 1 through $index {
				$new-w-after: $new-w-after - nth($new-widths, $i);
			}
						
			$left: $new-w-before - $orig-w-before;
			$right: $new-w-after - $orig-w-after;

			@if $index > $column or $column == $index {
				//if new position is after current one, pull 
				& > *:nth-child(#{$column}) {
					left: $left;
					position: relative;
				}

			}
			
			@if $index < $column {
				//if new position is before current one, pull 
				& > *:nth-child(#{$column}) {
					right: $right;
					position: relative;
				}
				
			} 
		}
	}
}

@mixin new-order($order, $columns:"", $margin:"", $flush-margin:true, $target:"*") {
		
	@if type-of($order) == list {
		//if no ratio is set, determine 
		//ratio from provided order list
		@if $columns == "" {
			$columns:();
			$order-count: length($order);

			@for $i from 1 through $order-count {
				$columns: append($columns, 1, comma);
			}
		}
		
		//if column ratio is not a list, generate it
		$columns: calc-column-ratio($columns);

		//calculate widths of 
		//current and new layouts
		$column-count: length($columns);
		$new-columns:();
		//retreive original order of columns
		@each $index in $order {
			$item: nth($columns, $index);
			$new-columns:append($new-columns, $item);
		}

		$original-widths:calculate-column-widths($columns, $margin, $flush-margin);
		$new-widths:calculate-column-widths($new-columns, $margin, $flush-margin);

		$original-subtraction:calculate-column-subtraction($columns, $margin, $flush-margin);
		$new-subtraction:calculate-column-subtraction($new-columns, $margin, $flush-margin);

//		$original-subtraction: (($original-subtraction / ((($column-count * 2) - 2))) * 4);
	
		//iterate through each column
		$index: 0;
		@each $column in $order {
			$index: $index + 1;

			//calc sum of original previous widths
			$orig-w-before: 0;
			@for $i from 1 through $column {
				$orig-w-before: $orig-w-before + nth($original-widths, $i);
			} 
			$orig-w-before: $orig-w-before - nth($original-widths, $column);
	 
			//calc sum of new previous widths
			$new-w-before: 0;
			@for $i from 1 through $index {
				$new-w-before: $new-w-before + nth($new-widths, $i);
			} 
			$new-w-before: $new-w-before - nth($new-widths, $index);
			
			//calc sum of original following widths
			$orig-w-after: 100;
			@for $i from 1 through $column {
				$orig-w-after: $orig-w-after - nth($original-widths, $i);
			} 
	
			//calc sum of new following widths
			$new-w-after: 100;
			@for $i from 1 through $index {
				$new-w-after: $new-w-after - nth($new-widths, $i);
			}
						
			$left: $new-w-before - $orig-w-before;
			$right: $new-w-after - $orig-w-after;
			
			$new-first-col: nth($order, 1);
			$new-last-col: nth($order, $column-count);

			
			$margin-left: 0;
			$margin-right: 0;
			$left-margin-ajustment: 0;
			$right-margin-ajustment: 0;			
			$margin-ajustment: 0;
			$leftover-margin: 0;
					
			@if $margin != "" {
				
				$margin-left: extract-position($margin,left);
				$margin-right: extract-position($margin,right);

				@if $flush-margin {
					
					
					/*
					1 margin-left and 1 margin right are removed
					this extra space needs to be distributed evenly among remaining columns
										
					*/
					
//				$left-margin-ajustment: $margin-left * ($column-count - 2);
//				$right-margin-ajustment: $margin-right * ($column-count - 2);
//				
//				$margin-ajustment: (($margin-left + $margin-right) / 2) / (($column-count - 2));	
//				
				
				$margin-ajustment: (($margin-left + $margin-right) / (($column-count * 2) - 2));	
				
				$leftover-margin: ($margin-left + $margin-right) / ($column-count - 2);

					//reapply margins to original left and right columns
					@if $column == 1 {
						& > *:nth-child(#{$column}) {
							margin-left: $margin-left;
						}
					} @else if $column == $column-count {
						& > *:nth-child(#{$column}) {
							margin-right: $margin-right;
						}
					}

					//apply flush margins to new left and right columns
		 			@if $column == $new-first-col {
						& > *:nth-child(#{$column}) {
							margin-left: 0;
						}
					} @else if $column == $new-last-col {
						& > *:nth-child(#{$column}) {
							margin-right: 0;
						}
					}
					

				}
			}
			

			@if $index > $column {
				//if new position is after current one, pull 
				& > *:nth-child(#{$column}) {

					//@if $margin != "" and $flush-margin and $column != $new-first-col and $column != $new-last-col {
					@if $margin != "" and $flush-margin {
						//left: calc(#{$left} - #{$margin-ajustment});
						//left: calc(#{$left} - #{$right-margin-ajustment});
						
						@if $column == $new-last-col {
//							left: calc(#{$left} - #{$margin-left / 2});
							left: $left;
						} @else if $column == $new-first-col {
//							left: calc(#{$left} + #{$margin-left / 2});
							left: $left;
						} @else {
							left: calc(#{$left} + #{$margin-left / 2});
						}
						
						//left: calc(#{$left} + #{$margin-ajustment});
						
					} @else {
						left: $left;
					}

					position: relative;
				}

			}
			
			@if $index < $column {
				//if new position is before current one, pull 
				& > *:nth-child(#{$column}) {

					//@if $margin != "" and $flush-margin and $column != $new-last-col and $column != $new-first-col {
					
					@if $margin != "" and $flush-margin {

						
						@if $column == $new-last-col {
							right: $right;
//							right: calc(#{$right} + #{$margin-right / 2});
//							right: calc(#{$right} - #{$original-subtraction});
						} @else if $column == $new-first-col {
							right: $right;
//							right: calc(#{$right} + #{$margin-right / 2});
//							right: calc(#{$right} - #{$original-subtraction});
						} @else {
							right: calc(#{$right} - #{$original-subtraction});
							right: calc(#{$right} + #{$margin-right / 2});
						}
						
							//right: calc(#{$right} + #{$margin-ajustment});

						
						
						
						//right: calc(#{$right} - #{$left-margin-ajustment});
					
					} @else {
						right: $right;
					}

					position: relative;
				}
				
			}
			

			@if $column == $index and $left != 0 {
				//if new position is the same 
				& > *:nth-child(#{$column}) {

					//@if $margin != "" and $flush-margin and $column != $new-first-col and $column != $new-last-col {
					@if $margin != "" and $flush-margin {
						//left: calc(#{$left} - #{$margin-ajustment});
						//left: calc(#{$left} - #{$right-margin-ajustment});
						
						@if $column == $new-last-col {
//							left: calc(#{$left} - #{$margin-left});
//							left: $left;
						} @else if $column == $new-first-col {
							left: calc(#{$left} + #{$margin-left / 2});
//							left: $left;
						} @else {
							left: calc(#{$left} + #{$margin-left / 2});
						}
						
						//left: calc(#{$left} + #{$margin-ajustment});
						
					} @else {
						left: $left;
					}

					position: relative;
				}

			}
			
			
		}
	}
}
