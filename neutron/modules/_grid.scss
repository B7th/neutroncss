/* Grid
---------------------------------------------*/

//Declares the container element of child rows or columns
@mixin columns(
	$columns:"", 
	$container-width:$container-max-width, 
	$container-align:"",
	$padding:$global-column-padding,
	$flush-padding:false,
	$margin:"",
	$flush-margin:true,
	$target:""
) {
	max-width: $container-width;
	margin-left: auto;
	margin-right: auto;
	@include clear-fix();

	$total-columns:"";
	@if type-of($columns) == list {
		$total-columns: sum($columns);
	} @else if $columns != "" {
		$total-columns: $columns;
	}
	
	$column-count: $columns;
	@if type-of($columns) == list {
		$column-count: length($columns);
	}


	
	$target-child-selector: "nth-of-type";
	@if $target == "" {
		$target: "*";
		$target-child-selector: "nth-child";
	}

	//set combined margins accounting for flush margin and deterine available width
	$total-margin-subtraction: 0;
	$available-width:100%;
	
	$extracted-margin-left:"";
	
	@if $margin != "" {
		
	$extracted-margin-left: extract-position($margin,left);
	$extracted-margin-right: extract-position($margin,right);

	@if length($margin) > 1 {
		//margin is not a single value
	}

		$first-margin-value: extract-position($margin,left);
		@if unit($extracted-margin-left) == "%" or unit($extracted-margin-right) == "%" {
			
			//margin is a %
			@if $flush-margin == true {
				$available-width: $available-width - $extracted-margin-left - $extracted-margin-right;
			} @else {
				$available-width: $available-width - (($column-count * $extracted-margin-left) + ($column-count * $extracted-margin-right) );
			}				
		} @else {
			//if non-percent unit used
			$total-margin-subtraction: ($extracted-margin-left + $extracted-margin-right) - (($extracted-margin-left + $extracted-margin-right) / $column-count);
			
			@if $flush-margin == false {
				$total-margin-subtraction: ($extracted-margin-left + $extracted-margin-right);
			}
		}
		

	/*
	$extracted-margin-left #{$extracted-margin-left}
	$extracted-margin-right #{$extracted-margin-right}
	$available-width #{$available-width}
	$total-margin-subtraction #{$total-margin-subtraction}
	*/
	
		
		
	}




	//If argument is not a list, 
	//and is not empty, set equal 
	//width to all immediate child elements
	@if type-of($columns) != list and $columns != "" {
		& > #{$target} {
			
			$calculated-width: ($available-width / $columns);
			
			@if $margin != "" and unit($extracted-margin-left) != "%" {
				width: calc(#{$calculated-width} - #{$total-margin-subtraction});
			} @else {
				width: $calculated-width;
			} 

			float:left;
			padding: $padding;
			
			@if $margin != "" {
				margin: $margin;
			}
			
			@content;
		}
	}

	//If argument is a list, set 
	//width of each immediate child 
	//as instructed by passed list
	@if type-of($columns) == list {
		$index: 0;

		@each $column in $columns {	
			$index: $index + 1;
			
			& > #{$target}:#{$target-child-selector}(#{$index}) {
				
				$calculated-width: ($available-width / $total-columns) * $column;
				
				@if $margin != "" and unit($extracted-margin-left) != "%" {
					width: calc(#{$calculated-width} - #{$total-margin-subtraction});
				} @else {
					width: $calculated-width;
				}
				float:left;
				padding: $padding;

				@if $margin != "" {
					margin: $margin;
				}
				
				@content;
			}
		}
	}
	
	@include flush-padding($flush-padding, $target);
	@include flush-margin($flush-margin, $column-count, $target);
	
	//Set alignment of container
	@if $container-align != "" {
		@include container-align($container-align);
	}

}

//Alias for columns
@mixin column(
	$columns:"", 
	$container-width:$container-max-width, 
	$container-align:"",
	$padding:$global-column-padding,
	$margin:"",
	$target:""
) {
	@include columns(
		$columns,
		$container-width,
		$container-align,
		$padding,
		$margin,
		$target
	);
}


@mixin flush-padding($active:true, $target:"") {
	//if padding is set to be flush remove 
	//padding on left and right padding on 
	//the first and last columns respectively.
	
	@if $target == "" {
		$target: "*";
	}

	@if $active {
		& > #{$target} {
			&:first-of-type {
				padding-left: 0;
			}
			&:last-of-type {
				padding-right: 0;
			}
		}
	}
}



@mixin flush-margin($active:true, $column-count:"", $target:"") {
	//if margin is set to be flush remove 
	//margin on left and right padding on 
	//the first and last columns respectively.
	
	$target-first-child-selector: "nth-of-type";
	$target-last-child-selector: "nth-of-type";
	@if $target == "" or $target == "*" {
		$target: "*";
		$target-first-child-selector: "nth-child";
		$target-last-child-selector: "nth-child";
	}

	
	
	@if $active {
		& > #{$target} {
			&:#{$target-first-child-selector}(#{$column-count}n+1) {
				margin-left: 0;
			}
			&:#{$target-last-child-selector}(#{$column-count}n) {
				margin-right: 0;
			}
		}
	}
}

@mixin container-align($align:"") {
	//Set alignment 
	@if $align != "" {
		
		@if $align == left {
			margin-left: 0;
		}
		
		@if $align == right {
			margin-right: 0;
		}
		
		@if $align == center {
			margin-right: auto;
			margin-left: auto;
		}

	}
}

@function calculate-widths($columns) {
	$column-total: sum($columns);
	$calculated-widths:();

	$index: 0;
	@each $column in $columns {	
		$index: $index + 1;
		$width: (100% / $column-total) * $column;
		$calculated-widths: append($calculated-widths, $width, comma);
	}

	@return $calculated-widths;
}

@mixin order($order, $columns:"") {
	
	@if type-of($order) == list {
		//if no ratio is set, determine 
		//ratio from provided order list
		@if $columns == "" {
			$columns:();
			$order-count: length($order);

			@for $i from 1 through $order-count {
				$columns: append($columns, 1, comma);
			}

		}

		//calculate widths of 
		//current and new layouts
		$column-count: length($columns);
		$new-columns:();
		@each $index in $order {
			$item: nth($columns, $index);
			$new-columns:append($new-columns, $item);
		}

		$original-widths:calculate-widths($columns);
		$new-widths:calculate-widths($new-columns);
	
		//iterate through each column
		$index: 0;
		@each $column in $order {
			$index: $index + 1;

			//calc sum of original previous widths
			$orig-w-before: 0;
			@for $i from 1 through $column {
				$orig-w-before: $orig-w-before + nth($original-widths, $i);
			} 
			$orig-w-before: $orig-w-before - nth($original-widths, $column);
	 
			//calc sum of new previous widths
			$new-w-before: 0;
			@for $i from 1 through $index {
				$new-w-before: $new-w-before + nth($new-widths, $i);
			} 
			$new-w-before: $new-w-before - nth($new-widths, $index);
			
			//calc sum of original following widths
			$orig-w-after: 100;
			@for $i from 1 through $column {
				$orig-w-after: $orig-w-after - nth($original-widths, $i);
			} 
	
			//calc sum of new following widths
			$new-w-after: 100;
			@for $i from 1 through $index {
				$new-w-after: $new-w-after - nth($new-widths, $i);
			}
						
			$left: $new-w-before - $orig-w-before;
			$right: $new-w-after - $orig-w-after;

			@if $index > $column or $column == $index {
				//if new position is after current one, pull 
				& > *:nth-child(#{$column}) {
					left: $left;
					position: relative;
				}

			}
			
			@if $index < $column {
				//if new position is before current one, pull 
				& > *:nth-child(#{$column}) {
					right: $right;
					position: relative;
				}
				
			} 
		}
	}
}
