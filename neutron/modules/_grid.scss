// Grid
//---------------------------------------------

//Declares the container element of child rows or columns
@mixin columns(
	$columns:"", 
	$container-width:$container-max-width, 
	$container-align:"",
	$padding:$global-column-padding,
	$flush-padding:false,
	$margin:"",
	$flush-margin:true,
	$target:"*"
) {
	max-width: $container-width;
	margin-left: auto;
	margin-right: auto;
	@include clear-fix();

	@if $columns != "" {

		$column-sum: get-column-sum($columns);	
		$column-count: get-column-count($columns);
		$column-ratio: calc-column-ratio($columns);
		$column-widths: calculate-column-widths($column-ratio, $container-width, $margin);	
		$target-child-selector: child-selector($target);
		
		$margin-left: 0;
		$margin-right: 0;
		
		@if $margin != "" {
			
			//get margins for left and right of the columns
			$margin-left: extract-position($margin,left);
			$margin-right: extract-position($margin,right);
		
		}
	
		//assign calculated widths to elements
		$index: 0;
		@each $width in $column-widths {	
			$index: $index + 1;
			
			$col-width: $width;

			& > #{$target}:#{$target-child-selector}(#{$column-count}n+#{$index}) {
			
				$calc-contents: "#{$width}";
					
				@if $margin != "" {
					
					@if $margin-left != 0 {
						$calc-contents: $calc-contents + " - #{$margin-left}";
					}					
					
					@if $margin-right != 0 {
						$calc-contents: $calc-contents + " - #{$margin-right}";
					}

					@if $flush-margin {
						$flush-left: $margin-left / $column-count;
						$flush-right: $margin-right / $column-count;
						$calc-contents: $calc-contents + " + #{$flush-left}";
						$calc-contents: $calc-contents + " + #{$flush-right}";
					}	

				}

				width: calc(#{$calc-contents});
				float:left;
				padding: $padding;				

				@if $margin != "" {
					margin: $margin;
				}
				
				//if first column
				@if $index == 1 {
					clear: left;
					
					@if $flush-padding {
						padding-left: 0;
					}
					@if $flush-margin {
						margin-left: 0;
					}
				}
				
				//if last column
				@if $index == $column-count {
					@if $flush-padding {
						padding-right: 0;
					}
					@if $flush-margin {
						margin-right: 0;
					}
				}
				
				@content;
			}
		}	
	}

	//Set alignment of container
	@if $container-align != "" {
		@include container-align($container-align);
	}

}

//Alias for columns
@mixin column($arguments...) {
	@include columns($arguments...);
}

//Alias for columns
@mixin col($arguments...) {
	@include columns($arguments...);
}

@function calculate-column-position($column-widths) {
	
	$column-positions: ();

	//Determine position of each column
	$col-index: 1;
	@each $column in $column-widths {

		//sum previous column widths
		$prev-columns: slice($column-widths, $end: $col-index);
		$position: sum($prev-columns);
		$position: $position - $column;
		$column-positions: append($column-positions, $position, comma);

		$col-index: $col-index + 1;
	}

	@return $column-positions;

}

@function reorder-list($list, $order) {
	
	$new-list:();

	@each $index in $order {
		$item: nth($list, $index);
		$new-list: append($new-list, $item);
	}
	
	@return $new-list;
}

@function calculate-column-widths($column-ratio, $args...) {
	
	$column-sum: sum($column-ratio);
	$column-count: length($column-ratio);
	$column-widths: ();

	//Determine width of each column
	@each $column in $column-ratio {
		$width: (100% / $column-sum) * $column;
		$column-widths: append($column-widths, $width, comma);
	}
	
	@return $column-widths;

}

@function old-calculate-column-widths($column-ratio, $margin:"", $flush-margin:true) {

	$avail-width: 100%;
	$left-margin-percent: 0%;
	$right-margin-percent: 0%; 
	$calc-column-widths: ();
	$column-sum: sum($column-ratio);
	$column-count: length($column-ratio);

	//calculate margins
	@if $margin != "" {
		
		//get margins for left and right of the columns
		$margin-left: extract-position($margin,left);
		$margin-right: extract-position($margin,right);

		//subtract total available width by margin percentage
		@if unit($margin-left) == "%" {
			$left-margin-percent: $column-count * $margin-left;
			
			@if $flush-margin == true {
				$left-margin-percent: $left-margin-percent - $margin-left;
			}				
		}
		
		@if unit($margin-right) == "%" {
			$right-margin-percent: $column-count * $margin-right;
			
			@if $flush-margin == true {
				$right-margin-percent: $right-margin-percent - $margin-right;
			}					
		}
	}

	//adjusted total avilable width
	$avail-width: $avail-width - ($left-margin-percent + $right-margin-percent);

	//iterate through columns and generate list of widths
	@each $column in $column-ratio {
		$calculated-width: ($avail-width / $column-sum) * $column;
		$calc-column-widths: append($calc-column-widths, $calculated-width, comma);
	}
	
	@return $calc-column-widths;

}

@mixin container-align($align:"") {
	//Set alignment 
	@if $align != "" {
		float:none;
		
		@if $align == left {
			margin-left: 0;
		}
		
		@if $align == right {
			margin-right: 0;
		}
		
		@if $align == center {
			margin-right: auto;
			margin-left: auto;
		}
	}
}

@function calc-column-ratio($columns) {
	$column-ratio: $columns;
	$column-sum: get-column-sum($columns);
	
	@if type-of($columns) != list {
		$column-ratio: ();
		
		@for $i from 1 through $column-sum {
			$column-ratio: append($column-ratio, $columns, comma);
		}
	}
	
	@return $column-ratio;
}

@function get-column-sum($columns) {
	@if type-of($columns) == list {
		@return sum($columns);
	} @else {
		@return $columns;
	}
}

@function get-column-count($columns) {
	@if type-of($columns) == list {
		@return length($columns);
	} @else {
		@return $columns;
	}
}

@function child-selector($target-selector) {
	$child-selector: "nth-of-type";
	
	@if $target-selector == "*" {
		$child-selector: "nth-child";
	}
	
	@return $child-selector;
}

@function calculate-widths($columns) {
	$column-total: sum($columns);
	$calculated-widths:();

	$index: 0;
	@each $column in $columns {	
		$index: $index + 1;
		$width: (100% / $column-total) * $column;
		$calculated-widths: append($calculated-widths, $width, comma);
	}

	@return $calculated-widths;
}

@mixin order($order, $columns:"", $margin:"", $flush-margin:true, $target:"*") {
	
	@if($flush-margin) {
		
		@warn "Flush margins is not supported by Order() yet.";
		
	} @else {
	
		@if type-of($order) == list {
			//if no ratio is set, determine 
			//ratio from provided order list
			@if $columns == "" {
				$columns:();
				$order-count: length($order);
	
				@for $i from 1 through $order-count {
					$columns: append($columns, 1, comma);
				}
			}
			
			//if column ratio is not a list, generate it
			$columns: calc-column-ratio($columns);
	
			//calculate widths of 
			//current and new layouts
			$column-count: length($columns);
			$new-columns: reorder-list($columns, $order);
			$ori-widths: calculate-column-widths($columns);
			$new-widths: reorder-list($ori-widths, $order);
			$ori-positions: calculate-column-position($ori-widths);
			
			//iterate over each column
			$i: 0;
			@each $column in $order {
				
				$i: $i + 1;
				
				$new-position: index($order, $column);	
						
				//get original position of column
				$ori-pos: nth($ori-positions, $column);
				
				//minus original column position from offset 
				$offset: 0 - $ori-pos;
				
				// get sum of widths of columns that come before current one and add to offset
				$index: 1;
				@while $index < $new-position {
	
					$offset: $offset + nth($new-widths, $index);
					$index: $index + 1;
	
				}
	
				& > *:nth-child(#{$column}) {
					left: $offset;
					position: relative;
	
				}
			}
		}
	}
}

